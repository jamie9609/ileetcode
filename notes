//必知算法
1、二分搜索
2、分治
3、dfs
4、bfs
5、回溯法
6、双指针
7、动态规划，dp
8、扫描线
9、快排



1、DFS、BFS

DFS 使用递归遍历。

BFS 遍历使用队列的数据结构。层序遍历属于广度优先搜索

1、深度优先遍历常用的数据结构为栈，广度优先遍历常用的数据结构为队列
2、深度优先遍历的思想是从上至下，对每一个分支一直往下一层遍历直到这个分支结束，然后返回上一层，对上一层的右子树这个分支继续深搜，直到一整棵树完全遍历，因此深搜的步骤符合栈后进先出的特点
广度优先遍历的思想是从左至右，对树的每一层所有结点依次遍历，当一层的结点遍历完全后，对下一层开始遍历，而下一层结点又恰好是上一层的子结点。因此广搜的步骤符合队列先进先出的思想。
3、关于二叉树的深度优先搜索
则又有三种遍历方法
先序遍历：对任一子树，先访问根，然后遍历其左子树，最后遍历其右子树。
中序遍历：对任一子树，先遍历其左子树，然后访问根，最后遍历其右子树。
后序遍历：对任一子树，先遍历其左子树，然后遍历其右子树，最后访问根。
除了利用栈以外，深度优先搜索也可以使用递归的方法。’
4、深度优先搜索算法：不全部保留结点，占用空间少；有回溯操作(即有入栈、出栈操作)，运行速度慢。
广度优先搜索算法：保留全部结点，占用空间大； 无回溯操作(即无入栈、出栈操作)，运行速度快。



N叉树的前序遍历：直接遍历node节点的全部子节点，入栈，出栈。入栈的顺序是从右到左。

N叉树的中序遍历

N叉树的后序遍历，利用了N叉树的前序遍历，但是出栈后写入切片的值是正向插入的，而不是追加进去。且入栈的顺序是从左到右。

N叉树的层序遍历：bfs，用到队列




二叉树的前序遍历：

二叉树的中序遍历。

二叉树的后序遍历。

二叉树的层序遍历，bfs，用到队列



最长公共子序列（Longest Common Subsequence，简称 LCS）
最长公共子序列（Longest Common Subsequence，简称 LCS）是一道非常经典的面试题目，因为它的解法是典型的二维动态规划，大部分比较困难的字符串问题都和这个问题一个套路，比如说编辑距离。而且，这个算法稍加改造就可以用于解决其他问题，所以说LCS算法是值得掌握的。

所谓子序列，就是要保留原始顺序，但可以是不连续的。审题之后你可能会有疑问，这个问题为啥就是动态规划来解决呢？因为子序列类型的问题，穷举出所有可能的结果都不容易，而动态规划算法做的就是穷举 + 剪枝，它俩天生一对儿。所以可以说只要涉及子序列问题，十有八九都需要动态规划来解决。
